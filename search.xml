<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>本地化存储技术-IndexedDB｜localForage</title>
      <link href="/2024/11/18/article1/"/>
      <url>/2024/11/18/article1/</url>
      
        <content type="html"><![CDATA[<p> <strong>前言：</strong><br>LocalStorage是浏览器存储轻量数据的一个方式，平常在本地化存储时可能会使用到，但在使用过程中会发现localStorage存在以下问题：</p><ul><li><strong>存储量小，卡顿问题</strong>： 通常限制在 5MB 左右（具体取决于浏览器），如果字符串过长，会存不下导致卡死，存储内容多会消耗内存空间</li><li><strong>存取不方便：</strong>  针对非字符串：存储需要序列化为，取值时反序列化，操作 不方便</li><li><strong>Key-value混乱</strong></li></ul><p><strong>LocalStorage 的适用场景</strong></p><ol><li>用户首选项（如暗黑模式、语言设置）</li><li>缓存简单的数据（如表单草稿）</li><li>轻量级的离线功能支持</li></ol><br/><p>对于更复杂的场景（如需要存储大量数据或支持异步操作），推荐使用 IndexedDB 或封装库 localForage：</p><h1 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h1><p>IndexedDB 是一个基于 JS 的面向对象数据库。<br>允许存储和检索用键索引的对象；可以存储结构化克隆算法支持的任何对象。</p><p> <strong>优点</strong></p><ul><li><strong>存储大</strong>：支持存储大量结构化数据</li><li><strong>灵活性</strong>：支持复杂的查询、键索引、多种数据类型等</li><li><strong>异步存取</strong>  IndexedDB 的读取和存储都是异步的，不会阻塞浏览器进程</li></ul><p><strong>缺点：</strong></p><ul><li>复杂性：使用起来相对复杂，学习成本高</li></ul><br><p>学习成本太高怎么办？<br>不慌，早就有大佬为我们封装好了，主角登场～</p><h1 id="封装IndexedDB：localForage"><a href="#封装IndexedDB：localForage" class="headerlink" title="封装IndexedDB：localForage"></a>封装IndexedDB：localForage</h1><p><strong>localForage</strong> 是一个封装库，简化了 IndexedDB 的使用，同时还提供了对其他存储机制（如 LocalStorage 和 WebSQL）的统一接口。</p><p>地址：</p><blockquote><p><a href="https://github.com/localForage/localForage">https://github.com/localForage/localForage</a></p></blockquote><p>文档：</p><blockquote><p><a href="https://localforage.github.io/localForage/">https://localforage.github.io/localForage/</a><br><a href="https://localforage.docschina.org/">https://localforage.docschina.org/</a>（中文）</p></blockquote><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li><strong>统一 API</strong>：无论底层使用 IndexedDB、LocalStorage 或 WebSQL，API 始终保持一致。</li><li><strong>自动降级</strong>：localForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL， 则使用localStorage。</li><li><strong>异步操作：</strong> 基于 Promise 的异步接口，避免了回调地狱。</li></ul><p>目前在所有主流浏览器中都可用：Chrome, Firefox, IE 和 Safari（包括 Safari Mobile)</p><h2 id="CRUD使用"><a href="#CRUD使用" class="headerlink" title="CRUD使用"></a>CRUD使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localforage.setItem(&quot;key&quot;, &#123; id: 1, name: &quot;item1&quot; &#125;).then((value) =&gt; &#123;</span><br><span class="line">  console.log(&quot;Stored value:&quot;, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>更多详情使用可以看文档</p></blockquote><ol><li>创建一个 indexedDB</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myIndexedDB = localforage.<span class="title function_">createInstance</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;myIndexedDB&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>存值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure><ol start="3"><li>取值<br>indexedDB存取是异步的，建议使用 promise.then() 或 async&#x2F;await 去读值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">getItem</span>(<span class="string">&#x27;somekey&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// we got our value</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="comment">// we got an error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">await</span> myIndexedDB.<span class="title function_">getItem</span>(<span class="string">&#x27;somekey&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除某项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">removeItem</span>(<span class="string">&#x27;somekey&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>重置数据库</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h2 id="多实例"><a href="#多实例" class="headerlink" title="多实例"></a>多实例</h2><p>在有多个模块需要使用本地村粗使，可以分模块创建多个实例。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eryaDB</span>: localforage.<span class="title function_">createInstance</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;eryaDB&#x27;</span>,</span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">csdnDB</span>: localforage.<span class="title function_">createInstance</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;csdnDB&#x27;</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>可以分别作为一个State，在页面中分别直接调取使用</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React hooks源码学习 —— useState</title>
      <link href="/2024/03/08/article3/"/>
      <url>/2024/03/08/article3/</url>
      
        <content type="html"><![CDATA[<p>Hooks 的使用必须要符合这条规则：确保 Hook 在<span style="color: orange">每一次渲染中都按照同样的顺序被调用。</span></p><h1 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h1><p><code>useState</code> 是 React Hooks 提供的一个 Hook，用于在函数组件中添加状态。<br>它返回一个状态变量和一个用于更新这个状态的函数。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [year, setYear] = <span class="title function_">useState</span>(<span class="number">2024</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Year is &#123;year&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1)</span></span><br><span class="line"><span class="language-xml">          setYear(year + 1)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo效果：<br><img src="/img/article3/demo-1.jpg" ></p><div class="note green icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p><b>useState 的内部实现原理</b><br>1.初始化 ：当组件首次渲染时，useState 会接收一个初始状态值（例如 0），并将其存储在内部状态中。<br>2.状态更新 ：调用 setCount 方法时，React 会将新的状态值存储起来，并计划触发组件的重新渲染。<br>3.重新渲染 ：在重新渲染时，useState 会返回当前的状态值，而不是初始状态值。</p></div><h2 id="useState-vs-Redux"><a href="#useState-vs-Redux" class="headerlink" title="useState vs Redux"></a>useState vs Redux</h2><table><thead><tr><th>特性</th><th><code>useState</code></th><th>Redux</th></tr></thead><tbody><tr><td><strong>应用场景</strong></td><td>简单的、局部的状态管理</td><td>复杂的、全局的状态管理</td></tr><tr><td><strong>实现机制</strong></td><td>React 内置的 Hook，使用简单直接</td><td>需要额外的配置，包括 <code>store</code>、<code>reducer</code>、<code>action</code> 等</td></tr><tr><td><strong>状态管理</strong></td><td>组件内部的状态管理</td><td>全局状态管理，多个组件共享状态</td></tr><tr><td><strong>状态更新</strong></td><td>通过 <code>setState</code> 函数更新状态</td><td>通过 <code>dispatch</code> 发送 <code>action</code>，由 <code>reducer</code> 处理</td></tr><tr><td><strong>性能影响</strong></td><td>只影响当前组件及其子组件，局部更新</td><td>影响所有订阅了状态变化的组件，全局更新</td></tr><tr><td><strong>学习曲线</strong></td><td>较低，容易上手</td><td>较高，需要理解 <code>store</code>、<code>reducer</code>、<code>action</code> 等概念</td></tr><tr><td><strong>状态初始化</strong></td><td><code>useState(initialValue)</code></td><td><code>const initialState = &#123;&#125;;</code> 在 <code>reducer</code> 中定义</td></tr><tr><td><strong>状态更新方式</strong></td><td><code>setState(newState)</code></td><td><code>dispatch(&#123; type: &#39;ACTION_TYPE&#39;, payload: data &#125;)</code></td></tr><tr><td><strong>状态订阅</strong></td><td>自动订阅，状态更新时组件重新渲染</td><td>需要使用 <code>connect</code> 或 <code>useSelector</code> 订阅状态变化</td></tr></tbody></table><p>useState的实现与Redux类似，给定初始 state，通过 <code>dispatch</code> 发送 <code>action</code>，由 <code>reducer</code> 处理 state，返回新的 state，并触发组件的重新渲染。</p><h1 id="手写useState"><a href="#手写useState" class="headerlink" title="手写useState"></a>手写useState</h1><p>综上，根据useState的实现原理，可以尝试手写一个useState，步骤如下：</p><h2 id="a-外部存储状态和索引"><a href="#a-外部存储状态和索引" class="headerlink" title="a. 外部存储状态和索引"></a>a. 外部存储状态和索引</h2><p>首先，定义一个外部数组 <code>memoizedStates</code> 用于存储所有状态，以及一个外部变量 <code>index</code> 用于记录当前状态的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> memoizedStates = []</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span> <span class="comment">// 记录当前state的索引</span></span><br></pre></td></tr></table></figure><h2 id="b-实现-useState-函数"><a href="#b-实现-useState-函数" class="headerlink" title="b. 实现 useState 函数"></a>b. 实现 useState 函数</h2><ul><li>初始化状态： 在 <code>memoizedStates</code> 中查找当前索引的值，如果不存在则初始化为 <code>initialValue</code></li><li>定义 <code>setState</code> 函数： 用于更新 <code>memoizedStates</code> 中的值，并触发重新渲染。</li><li>返回状态和 <code>setState</code> 函数： 返回当前状态和 <code>setState</code> 函数，并将 <code>index</code> 加1，以便下一次调用 useState 时访问下一个状态。</li></ul><div class="note warning flat"><p><code>memoizedState</code> 依赖于 Hook 的顺序调存取数据，如果在循环、条件、嵌套函数中调用 Hooks 导致 Hooks 顺序发生变化， <code>memoizedState</code> 并不会感知到！</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> memoizedStates = []</span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span> <span class="comment">//记录当前state的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useState</span> = (<span class="params">initialValue</span>) =&gt; &#123;</span><br><span class="line">  memoizedStates[index] = memoizedStates[index] || initialValue</span><br><span class="line">  <span class="keyword">const</span> currentIndex = index</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setState</span> = (<span class="params">newState</span>) =&gt; &#123;</span><br><span class="line">    memoizedStates[currentIndex] = newState</span><br><span class="line">    index = <span class="number">0</span> <span class="comment">// 重新渲染要清理</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [memoizedStates[index++], setState] <span class="comment">// 返回当前state，索引+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过程图解"><a href="#过程图解" class="headerlink" title="过程图解"></a>过程图解</h2><h3 id="初次渲染"><a href="#初次渲染" class="headerlink" title="初次渲染"></a>初次渲染</h3><p>每次useState执行时，都将对应的setState绑定到对应索引的位置，然后把初始值存入 <code>memoizedStates</code> 中。</p><table style="undefined;table-layout: fixed; width: 400px">  <tr>    <th colspan="3">      <div>  const [count, setCount] = useState(0)</div>         <div>const [year, setYear] = useState(2024)</div>      </th>  </tr>  <tr>    <th>index</th>    <th>setState</th>    <th>state</th>  </tr>  <tr>    <td>0</td>    <td>setCount</td>    <td>0</td>  </tr>  <tr>    <td>1</td>    <td>setYear</td>    <td>2024</td>  </tr></table><h3 id="点击按钮"><a href="#点击按钮" class="headerlink" title="点击按钮"></a>点击按钮</h3><p>按调用顺序触发 <code>setCount</code> 和 <code>setYear</code>，每个setState内部都使用 <code>currentIndex</code> 保存了对应索引，触发对应setState会改变对应的 <code>memoizedStates</code></p><table style="undefined;table-layout: fixed; width: 400px">  <tr>    <th colspan="3">      setCount(1)    </th>  </tr>  <tr>    <th colspan="3">      state[0] = 1     </th>  </tr>  <tr>    <th>index</th>    <th>setState</th>    <th>state</th>  </tr>  <tr>    <td>0</td>    <td>setCount</td>    <td>1</td>  </tr>  <tr>    <td>1</td>    <td>setYear</td>    <td>2024</td>  </tr>  <tr>    <th colspan="3">      state更新，重新渲染    </th>  </tr>  <tr>    <th colspan="3">      setYear(2021)    </th>  </tr>  <tr>    <th>index</th>    <th>setState</th>    <th>state</th>  </tr>  <tr>    <td>0</td>    <td>setCount</td>    <td>1</td>  </tr>  <tr>    <td>1</td>    <td>setYear</td>    <td>2025</td>  </tr></table><p>每次setState都会导致重新渲染，依旧是依次执行useState，但 memoizedState 中已经有了上一次的 state 值，因此初始化的值并不是传入的初始值而是上一次的值。</p><h1 id="源码学习笔记"><a href="#源码学习笔记" class="headerlink" title="源码学习笔记"></a>源码学习笔记</h1><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p><a href="https://github.com/xu-xiaoya/react/blob/main/packages/react/src/ReactHooks.js">✈️ github-ReactHooks.js</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ReactSharedInternals</span> <span class="keyword">from</span> <span class="string">&#x27;shared/ReactSharedInternals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveDispatcher</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatcher = <span class="title class_">ReactSharedInternals</span>.<span class="property">H</span>;</span><br><span class="line">  <span class="keyword">return</span> dispatcher;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> useState&lt;S&gt;(<span class="attr">initialState</span>: (<span class="function">() =&gt;</span> S) | S) &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatcher = <span class="title function_">resolveDispatcher</span>();</span><br><span class="line">  <span class="keyword">return</span> dispatcher.<span class="title function_">useState</span>(initialState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resolveDispatcher()</code> 函数用于获取当前的dispatcher实例，这个实例通常是通过访问 <code>ReactSharedInternals</code> 内部的某个属性（如 <code>ReactCurrentDispatcher</code>）来获取的。<br><code>useState</code> 实际上调用的是这个 <code>dispatcher</code> 实例上的 <code>useState</code> 方法，该方法由React内部实现，用于管理组件的状态</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p><a href="https://github.com/xu-xiaoya/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js">✈️ github-ReactFiberHooks.js</a></p><!-- ## 类型定义【ReactFiberHooks.js】 中有多个定义的type (涵盖了基本实现） --><h3 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h3><h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4><p>在React的ReactFiberHooks.js文件中，定义了一个Hook类型，是一个<b>单向链表</b>，它代表了函数组件中每个Hook的内部表示，<code>Hook.next</code>指向下一个Hook。<br><a href="https://github.com/xu-xiaoya/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L197">✈️ github-ReactFiberHooks.js - Hook</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type <span class="title class_">Hook</span> = &#123;</span><br><span class="line">  <span class="attr">memoizedState</span>: any, </span><br><span class="line"></span><br><span class="line">  <span class="attr">baseState</span>: any, <span class="comment">// 初始化 initialState， 已经每次 dispatch 之后 newState</span></span><br><span class="line">  <span class="attr">baseUpdate</span>: <span class="title class_">Update</span>&lt;any, any&gt; | <span class="literal">null</span>, <span class="comment">// 当前需要更新的 Update ，每次更新完之后，会赋值上一个 update，方便 react 在渲染错误的边缘，数据回溯</span></span><br><span class="line">  <span class="attr">queue</span>: <span class="title class_">UpdateQueue</span>&lt;any, any&gt; | <span class="literal">null</span>, <span class="comment">// UpdateQueue 通过，更新队列</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">Hook</span> | <span class="literal">null</span>,  <span class="comment">// link 到下一个 hooks，通过 next 串联每个hooks</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>memoizedState：当前Hook的状态值，用于渲染组件。</li><li>baseState：Hook的初始状态或上一次更新后的状态，用于比较和触发重新渲染。</li><li>baseQueue&#x2F;queue：指向更新队列的指针，存储待处理的更新。baseQueue在更新处理期间保持不变，而queue在每次渲染时重置。</li><li>next：指向下一个Hook对象的指针，形成Hook链。</li></ul><h4 id="Update-UpdateQueue"><a href="#Update-UpdateQueue" class="headerlink" title="Update + UpdateQueue"></a>Update + UpdateQueue</h4><p>在React中，组件的状态变化通过更新对象和更新队列来管理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> type <span class="title class_">Update</span>&lt;S, A&gt; = &#123;</span><br><span class="line">  <span class="attr">lane</span>: <span class="title class_">Lane</span>,</span><br><span class="line">  <span class="attr">revertLane</span>: <span class="title class_">Lane</span>,</span><br><span class="line">  <span class="attr">action</span>: A,</span><br><span class="line">  <span class="attr">hasEagerState</span>: boolean,</span><br><span class="line">  <span class="attr">eagerState</span>: S | <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">next</span>: <span class="title class_">Update</span>&lt;S, A&gt;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">UpdateQueue</span>&lt;S, A&gt; = &#123;</span><br><span class="line">  <span class="attr">pending</span>: <span class="title class_">Update</span>&lt;S, A&gt; | <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">lanes</span>: <span class="title class_">Lanes</span>,</span><br><span class="line">  <span class="attr">dispatch</span>: (<span class="function"><span class="params">A</span> =&gt;</span> mixed) | <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">lastRenderedReducer</span>: (<span class="function">(<span class="params">S, A</span>) =&gt;</span> S) | <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">lastRenderedState</span>: S | <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>更新（Update）：当组件状态需要改变时（如调用setState），React会创建一个更新对象。这个对象包含新状态值（或计算新状态的动作）及更新所属的通道（用于并发控制）。</li><li>更新队列（UpdateQueue）：每个组件都有一个更新队列，用于存储所有待处理的更新对象。组件重新渲染时，React会遍历队列，应用更新并计算新状态。</li></ul><h4 id="Hooks挂载和更新"><a href="#Hooks挂载和更新" class="headerlink" title="Hooks挂载和更新"></a>Hooks挂载和更新</h4><p><a href="https://github.com/xu-xiaoya/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L4136">✈️ github-ReactFiberHooks.js - HooksDispatcherOnMount完整代码</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HooksDispatcherOnMount</span>: <span class="title class_">Dispatcher</span> = &#123;</span><br><span class="line">  readContext,</span><br><span class="line"></span><br><span class="line">  use,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: mountEffect, <span class="comment">// 挂载阶段处理副作用</span></span><br><span class="line">  <span class="attr">useState</span>: mountState, <span class="comment">// 添加一个状态（挂载阶段）</span></span><br><span class="line">  ....</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HooksDispatcherOnUpdate</span>: <span class="title class_">Dispatcher</span> = &#123;</span><br><span class="line">  readContext,</span><br><span class="line"></span><br><span class="line">  use,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: updateEffect, <span class="comment">// 更新阶段处理副作用</span></span><br><span class="line">  <span class="attr">useState</span>: updateState, <span class="comment">// 添加一个状态（更新阶段）  </span></span><br><span class="line">  ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>HooksDispatcherOnMount：组件首次渲染（挂载）时，React使用的Hooks调度器，用于初始化Hooks。</p></li><li><p>HooksDispatcherOnUpdate：组件后续更新时，React使用的Hooks调度器，用于更新Hooks的状态或副作用。</p></li></ul><p>这两个调度器确保了Hooks在组件的不同生命周期阶段能够正确地工作。</p><h3 id="首次渲染"><a href="#首次渲染" class="headerlink" title="首次渲染"></a>首次渲染</h3><h4 id="beginWork"><a href="#beginWork" class="headerlink" title="beginWork"></a>beginWork</h4><p><a href="https://github.com/xu-xiaoya/react/blob/main/packages/react-reconciler/src/ReactFiberBeginWork.js#L3769">✈️ github-ReactFiberBeginWork.js - beginWork</a><br>初次渲染，React Fiber从<code>beginWork()</code>开始执行，它负责处理 React 元素树的每个节点。<br>它根据节点的类型（如函数组件、类组件、原生 DOM 元素等）调用相应的处理函数，这些处理函数负责更新 Fiber 节点的状态，并确定哪些节点需要被重新渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">beginWork</span>(<span class="params"></span></span><br><span class="line"><span class="params">  current: Fiber | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  workInProgress: Fiber,</span></span><br><span class="line"><span class="params">  renderLanes: Lanes,</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Fiber</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过检查current（当前Fiber节点）是否为null来判断是否首次渲染</span></span><br><span class="line">  <span class="keyword">if</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新标记：如果更新队列或者context发生了改变，置为true</span></span><br><span class="line">    didReceiveUpdate = <span class="literal">false</span>;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在进入begin阶段之前，先清除更新优先级</span></span><br><span class="line">  workInProgress.<span class="property">lanes</span> = <span class="title class_">NoLanes</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据节点的类型调用相应的处理函数</span></span><br><span class="line">  <span class="keyword">switch</span> (workInProgress.<span class="property">tag</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数组件</span></span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">FunctionComponent</span>: &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">Component</span> = workInProgress.<span class="property">type</span>;</span><br><span class="line">      <span class="keyword">const</span> unresolvedProps = workInProgress.<span class="property">pendingProps</span>;</span><br><span class="line">      <span class="keyword">const</span> resolvedProps =</span><br><span class="line">        disableDefaultPropsExceptForClasses ||</span><br><span class="line">        workInProgress.<span class="property">elementType</span> === <span class="title class_">Component</span></span><br><span class="line">          ? unresolvedProps</span><br><span class="line">          : <span class="title function_">resolveDefaultPropsOnNonClassComponent</span>(<span class="title class_">Component</span>, unresolvedProps);</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">updateFunctionComponent</span>(</span><br><span class="line">        current,</span><br><span class="line">        workInProgress,</span><br><span class="line">        <span class="title class_">Component</span>,</span><br><span class="line">        resolvedProps,</span><br><span class="line">        renderLanes,</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">ClassComponent</span>: &#123;</span><br><span class="line">      <span class="comment">// 略</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里hooks实际调用<code>updateFunctionComponent</code>，它负责处理函数组件的更新逻辑。</p><h4 id="updateFunctionComponent"><a href="#updateFunctionComponent" class="headerlink" title="updateFunctionComponent"></a>updateFunctionComponent</h4><p><a href="https://github.com/xu-xiaoya/react/blob/main/packages/react-reconciler/src/ReactFiberBeginWork.js#L10728">✈️ github-ReactFiberBeginWork.js - updateFunctionComponent</a>更新逻辑如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateFunctionComponent</span>(<span class="params"></span></span><br><span class="line"><span class="params">  current: <span class="literal">null</span> | Fiber, <span class="comment">// 当前Fiber节点</span></span></span><br><span class="line"><span class="params">  workInProgress: Fiber, <span class="comment">// 当前正在处理的Fiber节点</span></span></span><br><span class="line"><span class="params">  Component: any, <span class="comment">// 组件函数</span></span></span><br><span class="line"><span class="params">  nextProps: any, <span class="comment">// 新的props</span></span></span><br><span class="line"><span class="params">  renderLanes: Lanes, <span class="comment">// 渲染优先级</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nextChildren</span><br><span class="line">  <span class="comment">// 读取上下文</span></span><br><span class="line">  <span class="title function_">prepareToReadContext</span>(workInProgress, renderExpirationTime);</span><br><span class="line"></span><br><span class="line">  nextChildren = <span class="title function_">renderWithHooks</span>(</span><br><span class="line">    current,</span><br><span class="line">    workInProgress,</span><br><span class="line">    <span class="title class_">Component</span>,</span><br><span class="line">    nextProps,</span><br><span class="line">    context,</span><br><span class="line">    renderLanes,</span><br><span class="line">  );</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (current !== <span class="literal">null</span> &amp;&amp; !didReceiveUpdate) &#123;</span><br><span class="line">    <span class="comment">// 调用 bailoutHooks 和 bailoutOnAlreadyFinishedWork 来跳过未更新的组件</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="title function_">reconcileChildren</span>(current, workInProgress, nextChildren, renderLanes);</span><br><span class="line">  <span class="keyword">return</span> workInProgress.<span class="property">child</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染入口为renderWithHooks。</p><h4 id="renderWithHooks"><a href="#renderWithHooks" class="headerlink" title="renderWithHooks"></a>renderWithHooks</h4><p><a href="https://github.com/xu-xiaoya/react/blob/main/packages/react-reconciler/src/ReactFiberHooks.js#L546">✈️ github-ReactFiberHooks.js - renderWithHooks</a><br><code>renderWithHooks</code> 是React内部用于处理组件渲染的函数，并在开发模式下可能触发双重渲染以检测副作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> renderWithHooks&lt;<span class="title class_">Props</span>, <span class="title class_">SecondArg</span>&gt;(</span><br><span class="line">  <span class="attr">current</span>: <span class="title class_">Fiber</span> | <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">workInProgress</span>: <span class="title class_">Fiber</span>,</span><br><span class="line">  <span class="title class_">Component</span>: <span class="function">(<span class="params">p: Props, arg: SecondArg</span>) =&gt;</span> any,</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">Props</span>,</span><br><span class="line">  <span class="attr">secondArg</span>: <span class="title class_">SecondArg</span>,</span><br><span class="line">  <span class="attr">nextRenderLanes</span>: <span class="title class_">Lanes</span>,</span><br><span class="line">): any &#123;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 设置Hooks分发器</span></span><br><span class="line">    <span class="title class_">ReactSharedInternals</span>.<span class="property">H</span> = current === <span class="literal">null</span> || current.<span class="property">memoizedState</span> === <span class="literal">null</span></span><br><span class="line">      ? <span class="title class_">HooksDispatcherOnMount</span></span><br><span class="line">      : <span class="title class_">HooksDispatcherOnUpdate</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 双重渲染（Strict Mode）：</span></span><br><span class="line">  <span class="comment">// 在开发模式下，如果启用了严格模式（StrictMode），则组件可能会被渲染两次。这是为了更容易地检测到副作用。</span></span><br><span class="line">  <span class="comment">// 双重渲染期间，首次渲染会调用组件函数两次（但 Hooks 的状态在第二次调用时会复用），而第二次（实际的）渲染则不会。</span></span><br><span class="line">  <span class="comment">// 这确保了像 useMemo 这样的 Hook 在依赖项相同时不会重复运行。</span></span><br><span class="line">  <span class="keyword">const</span> shouldDoubleRenderDEV =</span><br><span class="line">    __DEV__ &amp;&amp; (workInProgress.<span class="property">mode</span> &amp; <span class="title class_">StrictLegacyMode</span>) !== <span class="title class_">NoMode</span>;</span><br><span class="line"></span><br><span class="line">  shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;</span><br><span class="line">  <span class="keyword">let</span> children = __DEV__</span><br><span class="line">    ? <span class="title function_">callComponentInDEV</span>(<span class="title class_">Component</span>, props, secondArg)</span><br><span class="line">    : <span class="title class_">Component</span>(props, secondArg);</span><br><span class="line">  shouldDoubleInvokeUserFnsInHooksDEV = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于指示在当前渲染阶段是否有计划进行额外的渲染更新。</span></span><br><span class="line">  <span class="keyword">if</span> (didScheduleRenderPhaseUpdateDuringThisPass) &#123;</span><br><span class="line">    children = <span class="title function_">renderWithHooksAgain</span>(</span><br><span class="line">      workInProgress,</span><br><span class="line">      <span class="title class_">Component</span>,</span><br><span class="line">      props,</span><br><span class="line">      secondArg,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否需要双重渲染</span></span><br><span class="line">  <span class="keyword">if</span> (shouldDoubleRenderDEV) &#123;</span><br><span class="line">    <span class="title function_">setIsStrictModeForDevtools</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      children = <span class="title function_">renderWithHooksAgain</span>(</span><br><span class="line">        workInProgress,</span><br><span class="line">        <span class="title class_">Component</span>,</span><br><span class="line">        props,</span><br><span class="line">        secondArg,</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="title function_">setIsStrictModeForDevtools</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">finishRenderingHooks</span>(current, workInProgress, <span class="title class_">Component</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程大致可以分为三部分：</p><ol><li>设置Hooks分发器：根据当前的开发模式和Fiber（工作单元）的状态，选择合适的Hooks分发器。</li><li>判断双重渲染需求：如果处于开发模式且启用了严格模式，则设置标志以指示需要进行双重渲染。</li><li>首次渲染并可能双重调用：调用组件函数进行首次渲染。在开发模式下，如果启用了双重渲染，则组件函数可能会被调用两次（但Hooks的状态在第二次调用时会复用）。</li><li>处理渲染阶段更新：如果在首次渲染阶段有更新发生，则重复渲染过程，直到组件状态稳定，不再产生新的渲染阶段更新。</li></ol><h5 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h5><p>renderWithHooks 函数的核心在于根据当前Fiber的状态来设置ReactCurrentDispatcher，这是React用来分发Hooks调用的机制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactSharedInternals</span>.<span class="property">H</span> =</span><br><span class="line">  current === <span class="literal">null</span> || current.<span class="property">memoizedState</span> === <span class="literal">null</span></span><br><span class="line">    ? <span class="title class_">HooksDispatcherOnMount</span></span><br><span class="line">    : <span class="title class_">HooksDispatcherOnUpdate</span>;</span><br></pre></td></tr></table></figure><ul><li>首次挂载<br>当current（即当前的Fiber节点）为空，或者current.memoizedState为空时，为首次加载;<br><code>useState</code>为<code>HooksDispatcherOnMount.useState</code>, （即<code>mountState</code>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useState = <span class="title class_">ReactCurrentDispatcher</span>.<span class="property">current</span>.<span class="property">useState</span> </span><br><span class="line">         = <span class="title class_">HooksDispatcherOnMount</span>.<span class="property">useState</span> </span><br><span class="line">         = mountState</span><br></pre></td></tr></table></figure><ul><li>更新阶段<br>当组件处于更新阶段时，current不为空且current.memoizedState也不为空。<br><code>useState</code>为<code>HooksDispatcherOnUpdate.useState</code>, （即<code>updateState</code>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useState = <span class="title class_">ReactCurrentDispatcher</span>.<span class="property">current</span>.<span class="property">useState</span> </span><br><span class="line">         = <span class="title class_">HooksDispatcherOnUpdate</span>.<span class="property">useState</span> </span><br><span class="line">         = updateState</span><br></pre></td></tr></table></figure><h4 id="mountState"><a href="#mountState" class="headerlink" title="mountState"></a>mountState</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> mountState&lt;S&gt;(</span><br><span class="line">  <span class="attr">initialState</span>: (<span class="function">() =&gt;</span> S) | S,</span><br><span class="line">): [S, <span class="title class_">Dispatch</span>&lt;<span class="title class_">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class="line">  <span class="comment">// 组件挂载时生产一个hook对象</span></span><br><span class="line">  <span class="keyword">const</span> hook = <span class="title function_">mountWorkInProgressHook</span>();</span><br><span class="line">  <span class="comment">// 初始state绑定到hook对象上</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    initialState = <span class="title function_">initialState</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  hook.<span class="property">memoizedState</span> = hook.<span class="property">baseState</span> = initialState;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新建一个队列，记录hook值的改变</span></span><br><span class="line">  <span class="keyword">const</span> queue = (hook.<span class="property">queue</span> = &#123;</span><br><span class="line">    <span class="attr">last</span>: <span class="literal">null</span>, <span class="comment">// 最后一次更新逻辑,  包括 &#123;action，next&#125; 即状态值和下一次 Update</span></span><br><span class="line">    <span class="attr">dispatch</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">lastRenderedReducer</span>: basicStateReducer,</span><br><span class="line">    <span class="attr">lastRenderedState</span>: (<span class="attr">initialState</span>: any),  <span class="comment">// 最后一次渲染组件时的状态</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过闭包的方式，实现队列在不同函数中的共享。前提是每次用的 dispatch 函数是同一个</span></span><br><span class="line">  <span class="comment">// 更改状态的方法</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">dispatch</span>: <span class="title class_">Dispatch</span>&lt;</span><br><span class="line">    <span class="title class_">BasicStateAction</span>&lt;S&gt;,</span><br><span class="line">    &gt; = (queue.<span class="property">dispatch</span> = (dispatchAction.<span class="title function_">bind</span>(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="comment">// Flow doesn&#x27;t know this is non-null, but we do.</span></span><br><span class="line">      ((<span class="attr">currentlyRenderingFiber</span>: any): <span class="title class_">Fiber</span>),</span><br><span class="line">      queue,</span><br><span class="line">    ): any));</span><br><span class="line">  <span class="keyword">return</span> [hook.<span class="property">memoizedState</span>, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mountWorkInProgressHook"><a href="#mountWorkInProgressHook" class="headerlink" title="mountWorkInProgressHook"></a>mountWorkInProgressHook</h4><p>创建一个新的 Hook，并返回当前 workInProgressHook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mountWorkInProgressHook</span>(<span class="params"></span>): <span class="title class_">Hook</span> &#123;</span><br><span class="line">  <span class="comment">//初始化一个hook</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">hook</span>: <span class="title class_">Hook</span> = &#123;</span><br><span class="line">    <span class="attr">memoizedState</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">baseState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">queue</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">baseUpdate</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表示当前正在处理的hook</span></span><br><span class="line">  <span class="comment">// 只有在第一次打开页面的时候，workInProgressHook 为空</span></span><br><span class="line">  <span class="keyword">if</span> (workInProgressHook === <span class="literal">null</span>) &#123;</span><br><span class="line">    firstWorkInProgressHook = workInProgressHook = hook;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// workInProgressHook已经存在就将新创建的这个Hook接在 workInProgressHook 的尾部</span></span><br><span class="line">    workInProgressHook = workInProgressHook.<span class="property">next</span> = hook;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> workInProgressHook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dispatchAction"><a href="#dispatchAction" class="headerlink" title="dispatchAction"></a>dispatchAction</h4><p>绑定当前 fiber 和 queue 到 dispatchAction </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">const dispatch: Dispatch&lt;</span><br><span class="line">  BasicStateAction&lt;S&gt;,</span><br><span class="line">  &gt; = (queue.dispatch = (dispatchAction.bind(</span><br><span class="line">    null,</span><br><span class="line">    // 绑定当前 fiber 和 queue</span><br><span class="line">    ((currentlyRenderingFiber: any): Fiber),</span><br><span class="line">    queue,</span><br><span class="line">  ): any));</span><br><span class="line"></span><br><span class="line">function dispatchAction&lt;S, A&gt;(</span><br><span class="line">  fiber: Fiber,</span><br><span class="line">  queue: UpdateQueue&lt;S, A&gt;,</span><br><span class="line">  action: A,</span><br><span class="line">) &#123;</span><br><span class="line">  const alternate = fiber.alternate;</span><br><span class="line"></span><br><span class="line">  // re-render fiber 调度处理</span><br><span class="line">  if (</span><br><span class="line">    fiber === currentlyRenderingFiber ||</span><br><span class="line">    (alternate !== null &amp;&amp; alternate === currentlyRenderingFiber)</span><br><span class="line">  ) &#123;</span><br><span class="line">    // This is a render phase update. Stash it in a lazily-created map of</span><br><span class="line">    // queue -&gt; linked list of updates. After this render pass, we&#x27;ll restart</span><br><span class="line">    // and apply the stashed updates on top of the work-in-progress hook.</span><br><span class="line">    didScheduleRenderPhaseUpdate = true;</span><br><span class="line">    const update: Update&lt;S, A&gt; = &#123;</span><br><span class="line">      expirationTime: renderExpirationTime,</span><br><span class="line">      suspenseConfig: null,</span><br><span class="line">      action,</span><br><span class="line">      eagerReducer: null,</span><br><span class="line">      eagerState: null,</span><br><span class="line">      next: null,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    // 本次更新周期里的更新记录缓存进 renderPhaseUpdates 中</span><br><span class="line">    if (renderPhaseUpdates === null) &#123;</span><br><span class="line">      renderPhaseUpdates = new Map();</span><br><span class="line">    &#125;</span><br><span class="line">    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);</span><br><span class="line">    if (firstRenderPhaseUpdate === undefined) &#123;</span><br><span class="line">      renderPhaseUpdates.set(queue, update);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // Append the update to the end of the list.</span><br><span class="line">      let lastRenderPhaseUpdate = firstRenderPhaseUpdate;</span><br><span class="line">      while (lastRenderPhaseUpdate.next !== null) &#123;</span><br><span class="line">        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;</span><br><span class="line">      &#125;</span><br><span class="line">      lastRenderPhaseUpdate.next = update;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    const currentTime = requestCurrentTime();</span><br><span class="line">    const suspenseConfig = requestCurrentSuspenseConfig();</span><br><span class="line">    const expirationTime = computeExpirationForFiber(</span><br><span class="line">      currentTime,</span><br><span class="line">      fiber,</span><br><span class="line">      suspenseConfig,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    // 使用数据结构存储所有的更新行为，以便在 re-render 流程中计算最新的状态值</span><br><span class="line">    const update: Update&lt;S, A&gt; = &#123;</span><br><span class="line">      expirationTime,</span><br><span class="line">      suspenseConfig,</span><br><span class="line">      action,</span><br><span class="line">      eagerReducer: null,</span><br><span class="line">      eagerState: null,</span><br><span class="line">      next: null,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">     // Append the update to the end of the list.</span><br><span class="line">    const last = queue.last;</span><br><span class="line">    if (last === null) &#123;</span><br><span class="line">      // This is the first update. Create a circular list.</span><br><span class="line">      update.next = update;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // ... 更新循环链表</span><br><span class="line">      const first = last.next;</span><br><span class="line">      if (first !== null) &#123;</span><br><span class="line">        // Still circular.</span><br><span class="line">        update.next = first;</span><br><span class="line">      &#125;</span><br><span class="line">      last.next = update;</span><br><span class="line">    &#125;</span><br><span class="line">    queue.last = update;</span><br><span class="line"></span><br><span class="line">    //  Fiber NoWork 时的处理 略</span><br><span class="line"></span><br><span class="line">    // 创建一个更新任务，执行 fiber 的渲染</span><br><span class="line">    scheduleWork(fiber, expirationTime);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fiber的值为currentlyRenderingFiber时是re-render，当前周期产生了新的周期，同时didScheduleRenderPhaseUpdate置为 true。</p><p>如果是re-render，则把所有更新记录在一个Map（renderPhaseUpdates ）上，并以每个Hook的queue为 key存储。</p><p>在 renderWithHooks 中 如果 didScheduleRenderPhaseUpdate 为 true，就会循环计数 numberOfReRenders 来记录 re-render 的次数；nextWorkInProgressHook 也存入值。</p><blockquote><p>因此更新的代码中：<br>判断是否是re-render可以有两种方式：<br>1、numberOfReRenders &gt; 0<br>2、nextWorkInProgressHook 是否为空</p></blockquote><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>renderWithHooks中的ReactCurrentDispatcher部分，更新过程调用updateState<br>updateState</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> updateState&lt;S&gt;(</span><br><span class="line">  <span class="attr">initialState</span>: (<span class="function">() =&gt;</span> S) | S,</span><br><span class="line">): [S, <span class="title class_">Dispatch</span>&lt;<span class="title class_">BasicStateAction</span>&lt;S&gt;&gt;] &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">updateReducer</span>(basicStateReducer, (<span class="attr">initialState</span>: any));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用的是 updateReducer</p><h4 id="updateWorkInProgressHook"><a href="#updateWorkInProgressHook" class="headerlink" title="updateWorkInProgressHook"></a>updateWorkInProgressHook</h4><p>获取当前工作的Hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前正在工作中的 Hook，即 workInProgressHook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateWorkInProgressHook</span>(<span class="params"></span>): <span class="title class_">Hook</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (nextWorkInProgressHook !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// There&#x27;s already a work-in-progress. Reuse it.</span></span><br><span class="line">    workInProgressHook = nextWorkInProgressHook;</span><br><span class="line">    nextWorkInProgressHook = workInProgressHook.<span class="property">next</span>;</span><br><span class="line"></span><br><span class="line">    currentHook = nextCurrentHook;</span><br><span class="line">    nextCurrentHook = currentHook !== <span class="literal">null</span> ? currentHook.<span class="property">next</span> : <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Clone from the current hook.</span></span><br><span class="line">    currentHook = nextCurrentHook;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">newHook</span>: <span class="title class_">Hook</span> = &#123;</span><br><span class="line">      <span class="attr">memoizedState</span>: currentHook.<span class="property">memoizedState</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">baseState</span>: currentHook.<span class="property">baseState</span>,</span><br><span class="line">      <span class="attr">queue</span>: currentHook.<span class="property">queue</span>,</span><br><span class="line">      <span class="attr">baseUpdate</span>: currentHook.<span class="property">baseUpdate</span>,</span><br><span class="line"></span><br><span class="line">      <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (workInProgressHook === <span class="literal">null</span>) &#123;</span><br><span class="line">      workInProgressHook = firstWorkInProgressHook = newHook;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      workInProgressHook = workInProgressHook.<span class="property">next</span> = newHook;</span><br><span class="line">    &#125;</span><br><span class="line">    nextCurrentHook = currentHook.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> workInProgressHook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nextWorkInProgressHook 存在就是 re-render，说明当前更新周期中还要继续处理workInProgressHook。<br>如果不是 re-render，就取下一个 Hook 为当前的 Hook，同时像 mountWorkInProgressHook 一样，新建一个 Hook 并返回 workInProgressHook。</p><p>总之，updateWorkInProgressHook 获取到了当前工作中的 workInProgressHook。</p><h4 id="updateReducer"><a href="#updateReducer" class="headerlink" title="updateReducer"></a>updateReducer</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 dispatchAction 中存储的更新行为计算出新的状态值，并返回给组件</span></span><br><span class="line"><span class="keyword">function</span> updateReducer&lt;S, I, A&gt;(</span><br><span class="line">  <span class="attr">reducer</span>: <span class="function">(<span class="params">S, A</span>) =&gt;</span> S,</span><br><span class="line">  <span class="attr">initialArg</span>: I,</span><br><span class="line">  init?: <span class="function"><span class="params">I</span> =&gt;</span> S,</span><br><span class="line">): [S, <span class="title class_">Dispatch</span>&lt;A&gt;] &#123;</span><br><span class="line">  <span class="comment">// 获取当前正在工作中的 hook</span></span><br><span class="line">  <span class="keyword">const</span> hook = <span class="title function_">updateWorkInProgressHook</span>();</span><br><span class="line">  <span class="keyword">const</span> queue = hook.<span class="property">queue</span>;</span><br><span class="line">  </span><br><span class="line">  queue.<span class="property">lastRenderedReducer</span> = reducer;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 根据 dispatchAction 中存储的更新行为计算出新的状态值，并返回给组件</span></span><br><span class="line">  <span class="keyword">if</span> (numberOfReRenders &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// re-render：当前更新周期中产生了新的更新</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">dispatch</span>: <span class="title class_">Dispatch</span>&lt;A&gt; = (queue.<span class="property">dispatch</span>: any);</span><br><span class="line">    <span class="keyword">if</span> (renderPhaseUpdates !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 所有更新过程中产生的更新记录在 renderPhaseUpdates 这个 Map上，以每个 Hook 的 queue 为 key。</span></span><br><span class="line">      <span class="keyword">const</span> firstRenderPhaseUpdate = renderPhaseUpdates.<span class="title function_">get</span>(queue);</span><br><span class="line">      <span class="keyword">if</span> (firstRenderPhaseUpdate !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        renderPhaseUpdates.<span class="title function_">delete</span>(queue);</span><br><span class="line">        <span class="keyword">let</span> newState = hook.<span class="property">memoizedState</span>;</span><br><span class="line">        <span class="keyword">let</span> update = firstRenderPhaseUpdate;</span><br><span class="line">        <span class="comment">// 如果是 re-render，继续执行这些更新直到当前渲染周期中没有更新为止</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">          <span class="comment">// 和当前渲染优先级相同</span></span><br><span class="line">          <span class="keyword">const</span> action = update.<span class="property">action</span>;</span><br><span class="line">          newState = <span class="title function_">reducer</span>(newState, action);</span><br><span class="line">          update = update.<span class="property">next</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (update !== <span class="literal">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 标记fiber perfomred work 当new state和current state不同时</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">is</span>(newState, hook.<span class="property">memoizedState</span>)) &#123;</span><br><span class="line">          <span class="title function_">markWorkInProgressReceivedUpdate</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hook.<span class="property">memoizedState</span> = newState;</span><br><span class="line">        <span class="keyword">if</span> (hook.<span class="property">baseUpdate</span> === queue.<span class="property">last</span>) &#123;</span><br><span class="line">          hook.<span class="property">baseState</span> = newState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue.<span class="property">lastRenderedState</span> = newState;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [newState, dispatch];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [hook.<span class="property">memoizedState</span>, dispatch];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 整个队列中的最后更新</span></span><br><span class="line">  <span class="keyword">const</span> last = queue.<span class="property">last</span>;</span><br><span class="line"> <span class="comment">// 作为基本状态一部分的最后更新</span></span><br><span class="line">  <span class="keyword">const</span> baseUpdate = hook.<span class="property">baseUpdate</span>;</span><br><span class="line">  <span class="keyword">const</span> baseState = hook.<span class="property">baseState</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 查找第一个未处理的更新</span></span><br><span class="line">  <span class="keyword">let</span> first;</span><br><span class="line">  <span class="keyword">if</span> (baseUpdate !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (last !== <span class="literal">null</span>) &#123;</span><br><span class="line">      last.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    first = baseUpdate.<span class="property">next</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    first = last !== <span class="literal">null</span> ? last.<span class="property">next</span> : <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (first !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newState = baseState;</span><br><span class="line">    <span class="keyword">let</span> newBaseState = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> newBaseUpdate = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> prevUpdate = baseUpdate;</span><br><span class="line">    <span class="keyword">let</span> update = first;</span><br><span class="line">    <span class="keyword">let</span> didSkip = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="comment">// fiber逻辑</span></span><br><span class="line">      <span class="keyword">const</span> updateExpirationTime = update.<span class="property">expirationTime</span>;</span><br><span class="line">      <span class="keyword">if</span> (updateExpirationTime &lt; renderExpirationTime) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!didSkip) &#123;</span><br><span class="line">          didSkip = <span class="literal">true</span>;</span><br><span class="line">          newBaseUpdate = prevUpdate;</span><br><span class="line">          newBaseState = newState;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (updateExpirationTime &gt; remainingExpirationTime) &#123;</span><br><span class="line">          remainingExpirationTime = updateExpirationTime;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">markRenderEventTimeAndConfig</span>(</span><br><span class="line">          updateExpirationTime,</span><br><span class="line">          update.<span class="property">suspenseConfig</span>,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环链表，执行每一次更新</span></span><br><span class="line">        <span class="keyword">if</span> (update.<span class="property">eagerReducer</span> === reducer) &#123;</span><br><span class="line">          newState = ((update.<span class="property">eagerState</span>: any): S);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> action = update.<span class="property">action</span>;</span><br><span class="line">          newState = <span class="title function_">reducer</span>(newState, action);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      prevUpdate = update;</span><br><span class="line">      update = update.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (update !== <span class="literal">null</span> &amp;&amp; update !== first);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!didSkip) &#123;</span><br><span class="line">      newBaseUpdate = prevUpdate;</span><br><span class="line">      newBaseState = newState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">is</span>(newState, hook.<span class="property">memoizedState</span>)) &#123;</span><br><span class="line">      <span class="title function_">markWorkInProgressReceivedUpdate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hook.<span class="property">memoizedState</span> = newState;</span><br><span class="line">    hook.<span class="property">baseUpdate</span> = newBaseUpdate;</span><br><span class="line">    hook.<span class="property">baseState</span> = newBaseState;</span><br><span class="line"></span><br><span class="line">    queue.<span class="property">lastRenderedState</span> = newState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">dispatch</span>: <span class="title class_">Dispatch</span>&lt;A&gt; = (queue.<span class="property">dispatch</span>: any);</span><br><span class="line">  <span class="keyword">return</span> [hook.<span class="property">memoizedState</span>, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>updateReducer 分为两种情况：</p><ol><li>非 re-render，即当前更新周期只有一个 Update。</li><li>re-render，当前更新周期又产生了新的更新。</li></ol><h4 id="re-render的情况"><a href="#re-render的情况" class="headerlink" title="re-render的情况"></a>re-render的情况</h4><p>numberOfReRenders 记录了 re-render 的次数，如果大于 0 说明当前更新周期中又产生了新的更新，那么就继续执行这些更新，根据 reducer 和 update.action 来创建新的 state，直到当前渲染周期中没有更新为止，最后赋值给 Hook.memoizedState 以及 Hook.baseState。</p><p>非 re-render的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">  // 循环链表，执行每一次更新</span><br><span class="line">  if (update.eagerReducer === reducer) &#123;</span><br><span class="line">    newState = ((update.eagerState: any): S);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    const action = update.action;</span><br><span class="line">    newState = reducer(newState, action);</span><br><span class="line">  &#125;</span><br><span class="line">  prevUpdate = update;</span><br><span class="line">  update = update.next;</span><br><span class="line">&#125; while (update !== null &amp;&amp; update !== first);</span><br></pre></td></tr></table></figure><p>在此情况下，需要对每一个 update 判断优先级：</p><ol><li>如果不是当前整体更新优先级内的更新会被跳过，第一个跳过的 update 会变成新的 Hook.baseUpdate。</li><li>需要保证后续的更新要在 baseUpdate 更新之后的基础上再次执行，因此结果可能会不一样。<br>最后同样需要赋值给 Hook.memoizedState 以及 Hook.baseState。<br>单独使用useState 基本上不会有re-render的情况，除非写在函数顶部，就会导致无线re-render。dev下的dispatchAction会报错。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React报错#310复盘小结+hooks使用的场景+调用原理</title>
      <link href="/2023/06/30/article2/"/>
      <url>/2023/06/30/article2/</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>apm报错：<strong>Minified React error #310</strong><br><a href="https://react.dev/errors/310?invariant=310">https://react.dev/errors/310?invariant=310</a><br><img src="/img/article2/article2-error.jpg"><br>当我们有条件地调用一个钩子或在所有钩子运行之前提前返回时，会产生”Rendered more hooks than during the previous render”错误。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><div style="display: flex;">  <div style="width: 49%;">    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    …………</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (条件) &#123;</span><br><span class="line">      <span class="keyword">return</span> (……)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">-   <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">-   <span class="title function_">useEffect</span>(函数<span class="number">1</span>, [……])</span><br><span class="line">    <span class="keyword">return</span> (……)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </div>  <span style="width: 2%;"></span>  <div style="width: 49%;">    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    …………</span><br><span class="line">+   <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">+   <span class="title function_">useEffect</span>(函数<span class="number">1</span>, [……])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (条件) &#123;</span><br><span class="line">      <span class="keyword">return</span> (……)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> (……)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </div></div><p>if中 <code>return</code>  阻塞了后续hook的渲染，为了解决该错误，将所有的钩子<b>移到函数组件的顶层</b>，以及不要在条件中使用钩子。</p><h2 id="原理-学习"><a href="#原理-学习" class="headerlink" title="原理&amp;学习"></a>原理&amp;学习</h2><p>React 依赖于 <strong>Hook 调用的顺序</strong>。<br>在正常的程序中，Hook 的调用顺序在每次渲染中都是相同的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(函数<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> [test, setTest] = <span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首次渲染</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)            <span class="comment">// 1. 使用 false 初始化变量名为 loading 的 state</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)             <span class="comment">// 2. 添加 effect 以保存 form 操作</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)            <span class="comment">// 3. 使用 &#x27;Poppins&#x27; 初始化变量名为 surname 的 state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次渲染</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)            <span class="comment">// 1. 读取变量名为 loading 的 state（参数被忽略）</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)             <span class="comment">// 2. 替换保存 form 的 effect</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)            <span class="comment">// 3. 读取变量名为 surname 的 state（参数被忽略）</span></span><br></pre></td></tr></table></figure><p><span style="color: red;">只要 Hook 的调用顺序在多次渲染之间保持一致，React 就能正确地将内部 state 和对应的 Hook 进行关联。</span></p><p>那如果在正常程序中插入一个if语句呢？如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(函数<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (条件) &#123;</span><br><span class="line">      <span class="keyword">return</span> （）</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [test, setTest] = <span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If条件的存在导致程序提前终止，不再执行下方语句（而下方又存在一些hook），导致两种渲染情况不一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入if没return</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)            <span class="comment">// 1. 使用 false 初始化变量名为 loading 的 state</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)             <span class="comment">// 2. 添加 effect 以保存 form 操作</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)            <span class="comment">// 3. 使用 &#x27;Poppins&#x27; 初始化变量名为 surname 的 state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入if并return</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)             <span class="comment">// 1. 读取变量名为 loading 的 state（参数被忽略）</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)              <span class="comment">// 2. 替换保存 form 的 effect</span></span><br><span class="line"><span class="comment">//useState(&#x27;name&#x27;)           // 3. 此 Hook 被忽略！</span></span><br></pre></td></tr></table></figure><h2 id="引发错误情况"><a href="#引发错误情况" class="headerlink" title="引发错误情况"></a>引发错误情况</h2><p><a href="https://zh-hans.reactjs.org/docs/hooks-rules.html">https://zh-hans.reactjs.org/docs/hooks-rules.html</a></p><h3 id="1-不要在循环，条件或嵌套函数中调用-Hook"><a href="#1-不要在循环，条件或嵌套函数中调用-Hook" class="headerlink" title="1. 不要在循环，条件或嵌套函数中调用 Hook"></a>1. 不要在循环，条件或嵌套函数中调用 Hook</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">-  <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">-    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">-      <span class="variable language_">console</span>.<span class="title function_">log</span>(counter);</span><br><span class="line">-    &#125;);</span><br><span class="line">-  &#125;</span><br><span class="line"><span class="comment">// 将if条件语句移到useEffect钩子内部</span></span><br><span class="line">+  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">+    <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">+      <span class="variable language_">console</span>.<span class="title function_">log</span>(counter);</span><br><span class="line">+    &#125;</span><br><span class="line">+  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。"><a href="#2-把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。" class="headerlink" title="2. 把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。"></a>2. 把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">+ <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;salmon&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Returning early<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Error: 该hook在counter&lt;=0条件时，才被调用</span></span><br><span class="line">- <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;salmon&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;toggle loading<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-React函数组件或自定义钩子中只在调用Hook"><a href="#3-React函数组件或自定义钩子中只在调用Hook" class="headerlink" title="3. React函数组件或自定义钩子中只在调用Hook"></a>3. React函数组件或自定义钩子中只在调用Hook</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在普通函数中不要使用hook</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AppContent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    …………</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="attr">dataIndex</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">- <span class="attr">render</span>: <span class="title class_">AppContent</span>,</span><br><span class="line">+ <span class="attr">render</span>: <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AppContent</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>只从React函数组件或自定义钩子中调用Hook</li><li>只在最顶层使用 Hook</li><li>不要在循环，条件或嵌套函数中调用 Hook</li><li>确保总是在你的 React 函数的最顶层以及任何 return 之前使用 Hook</li></ul><p>这有助于React在多个<code>useState</code>和<code>useEffect</code>调用之间保留钩子的状态。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
