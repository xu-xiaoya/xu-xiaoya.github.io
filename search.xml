<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>本地化存储技术-IndexedDB｜localForage</title>
      <link href="/2024/11/18/article1/"/>
      <url>/2024/11/18/article1/</url>
      
        <content type="html"><![CDATA[<p> <strong>前言：</strong><br>LocalStorage是浏览器存储轻量数据的一个方式，平常在本地化存储时可能会使用到，但在使用过程中会发现localStorage存在以下问题：</p><ul><li><strong>存储量小，卡顿问题</strong>： 通常限制在 5MB 左右（具体取决于浏览器），如果字符串过长，会存不下导致卡死，存储内容多会消耗内存空间</li><li><strong>存取不方便：</strong>  针对非字符串：存储需要序列化为，取值时反序列化，操作 不方便</li><li><strong>Key-value混乱</strong></li></ul><p><strong>LocalStorage 的适用场景</strong></p><ol><li>用户首选项（如暗黑模式、语言设置）</li><li>缓存简单的数据（如表单草稿）</li><li>轻量级的离线功能支持</li></ol><br/><p>对于更复杂的场景（如需要存储大量数据或支持异步操作），推荐使用 IndexedDB 或封装库 localForage：</p><h1 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h1><p>IndexedDB 是一个基于 JS 的面向对象数据库。<br>允许存储和检索用键索引的对象；可以存储结构化克隆算法支持的任何对象。</p><p> <strong>优点</strong></p><ul><li><strong>存储大</strong>：支持存储大量结构化数据</li><li><strong>灵活性</strong>：支持复杂的查询、键索引、多种数据类型等</li><li><strong>异步存取</strong>  IndexedDB 的读取和存储都是异步的，不会阻塞浏览器进程</li></ul><p><strong>缺点：</strong></p><ul><li>复杂性：使用起来相对复杂，学习成本高</li></ul><br><p>学习成本太高怎么办？<br>不慌，早就有大佬为我们封装好了，主角登场～</p><h1 id="封装IndexedDB：localForage"><a href="#封装IndexedDB：localForage" class="headerlink" title="封装IndexedDB：localForage"></a>封装IndexedDB：localForage</h1><p><strong>localForage</strong> 是一个封装库，简化了 IndexedDB 的使用，同时还提供了对其他存储机制（如 LocalStorage 和 WebSQL）的统一接口。</p><p>地址：</p><blockquote><p><a href="https://github.com/localForage/localForage">https://github.com/localForage/localForage</a></p></blockquote><p>文档：</p><blockquote><p><a href="https://localforage.github.io/localForage/">https://localforage.github.io/localForage/</a><br><a href="https://localforage.docschina.org/">https://localforage.docschina.org/</a>（中文）</p></blockquote><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li><strong>统一 API</strong>：无论底层使用 IndexedDB、LocalStorage 或 WebSQL，API 始终保持一致。</li><li><strong>自动降级</strong>：localForage 有一个优雅降级策略，若浏览器不支持 IndexedDB 或 WebSQL， 则使用localStorage。</li><li><strong>异步操作：</strong> 基于 Promise 的异步接口，避免了回调地狱。</li></ul><p>目前在所有主流浏览器中都可用：Chrome, Firefox, IE 和 Safari（包括 Safari Mobile)</p><h2 id="CRUD使用"><a href="#CRUD使用" class="headerlink" title="CRUD使用"></a>CRUD使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localforage.setItem(&quot;key&quot;, &#123; id: 1, name: &quot;item1&quot; &#125;).then((value) =&gt; &#123;</span><br><span class="line">  console.log(&quot;Stored value:&quot;, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>更多详情使用可以看文档</p></blockquote><ol><li>创建一个 indexedDB</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myIndexedDB = localforage.<span class="title function_">createInstance</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;myIndexedDB&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>存值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure><ol start="3"><li>取值<br>indexedDB存取是异步的，建议使用 promise.then() 或 async&#x2F;await 去读值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">getItem</span>(<span class="string">&#x27;somekey&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// we got our value</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="comment">// we got an error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">await</span> myIndexedDB.<span class="title function_">getItem</span>(<span class="string">&#x27;somekey&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>删除某项</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">removeItem</span>(<span class="string">&#x27;somekey&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>重置数据库</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myIndexedDB.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h2 id="多实例"><a href="#多实例" class="headerlink" title="多实例"></a>多实例</h2><p>在有多个模块需要使用本地村粗使，可以分模块创建多个实例。<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eryaDB</span>: localforage.<span class="title function_">createInstance</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;eryaDB&#x27;</span>,</span><br><span class="line">&#125;),</span><br><span class="line"><span class="attr">csdnDB</span>: localforage.<span class="title function_">createInstance</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;csdnDB&#x27;</span>,</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>可以分别作为一个State，在页面中分别直接调取使用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>React报错#310复盘小结+hooks使用的场景+调用原理</title>
      <link href="/2023/06/30/article2/"/>
      <url>/2023/06/30/article2/</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>apm报错：<strong>Minified React error #310</strong><br><a href="https://react.dev/errors/310?invariant=310">https://react.dev/errors/310?invariant=310</a><br><img src="/img/article2/article2-error.jpg"><br>当我们有条件地调用一个钩子或在所有钩子运行之前提前返回时，会产生”Rendered more hooks than during the previous render”错误。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><div style="display: flex;">  <div style="width: 49%;">    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    …………</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (条件) &#123;</span><br><span class="line">      <span class="keyword">return</span> (……)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">-   <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">-   <span class="title function_">useEffect</span>(函数<span class="number">1</span>, [……])</span><br><span class="line">    <span class="keyword">return</span> (……)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </div>  <span style="width: 2%;"></span>  <div style="width: 49%;">    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确代码</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    …………</span><br><span class="line">+   <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">+   <span class="title function_">useEffect</span>(函数<span class="number">1</span>, [……])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (条件) &#123;</span><br><span class="line">      <span class="keyword">return</span> (……)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> (……)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  </div></div><p>if中 <code>return</code>  阻塞了后续hook的渲染，为了解决该错误，将所有的钩子<b>移到函数组件的顶层</b>，以及不要在条件中使用钩子。</p><h2 id="原理-学习"><a href="#原理-学习" class="headerlink" title="原理&amp;学习"></a>原理&amp;学习</h2><p>React 依赖于 <strong>Hook 调用的顺序</strong>。<br>在正常的程序中，Hook 的调用顺序在每次渲染中都是相同的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(函数<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> [test, setTest] = <span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首次渲染</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)            <span class="comment">// 1. 使用 false 初始化变量名为 loading 的 state</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)             <span class="comment">// 2. 添加 effect 以保存 form 操作</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)            <span class="comment">// 3. 使用 &#x27;Poppins&#x27; 初始化变量名为 surname 的 state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次渲染</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)            <span class="comment">// 1. 读取变量名为 loading 的 state（参数被忽略）</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)             <span class="comment">// 2. 替换保存 form 的 effect</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)            <span class="comment">// 3. 读取变量名为 surname 的 state（参数被忽略）</span></span><br></pre></td></tr></table></figure><p><span style="color: red;">只要 Hook 的调用顺序在多次渲染之间保持一致，React 就能正确地将内部 state 和对应的 Hook 进行关联。</span></p><p>那如果在正常程序中插入一个if语句呢？如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(函数<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (条件) &#123;</span><br><span class="line">      <span class="keyword">return</span> （）</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [test, setTest] = <span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If条件的存在导致程序提前终止，不再执行下方语句（而下方又存在一些hook），导致两种渲染情况不一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入if没return</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)            <span class="comment">// 1. 使用 false 初始化变量名为 loading 的 state</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)             <span class="comment">// 2. 添加 effect 以保存 form 操作</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;name&#x27;</span>)            <span class="comment">// 3. 使用 &#x27;Poppins&#x27; 初始化变量名为 surname 的 state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入if并return</span></span><br><span class="line"><span class="title function_">useState</span>(<span class="string">&#x27;false&#x27;</span>)             <span class="comment">// 1. 读取变量名为 loading 的 state（参数被忽略）</span></span><br><span class="line"><span class="title function_">useEffect</span>(函数<span class="number">1</span>)              <span class="comment">// 2. 替换保存 form 的 effect</span></span><br><span class="line"><span class="comment">//useState(&#x27;name&#x27;)           // 3. 此 Hook 被忽略！</span></span><br></pre></td></tr></table></figure><h2 id="引发错误情况"><a href="#引发错误情况" class="headerlink" title="引发错误情况"></a>引发错误情况</h2><p><a href="https://zh-hans.reactjs.org/docs/hooks-rules.html">https://zh-hans.reactjs.org/docs/hooks-rules.html</a></p><h3 id="1-不要在循环，条件或嵌套函数中调用-Hook"><a href="#1-不要在循环，条件或嵌套函数中调用-Hook" class="headerlink" title="1. 不要在循环，条件或嵌套函数中调用 Hook"></a>1. 不要在循环，条件或嵌套函数中调用 Hook</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">-  <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">-    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">-      <span class="variable language_">console</span>.<span class="title function_">log</span>(counter);</span><br><span class="line">-    &#125;);</span><br><span class="line">-  &#125;</span><br><span class="line"><span class="comment">// 将if条件语句移到useEffect钩子内部</span></span><br><span class="line">+  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">+    <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">+      <span class="variable language_">console</span>.<span class="title function_">log</span>(counter);</span><br><span class="line">+    &#125;</span><br><span class="line">+  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。"><a href="#2-把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。" class="headerlink" title="2. 把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。"></a>2. 把所有的钩子移到组件的顶层，在任何可能返回值的条件之上。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">+ <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;salmon&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (counter &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Returning early<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Error: 该hook在counter&lt;=0条件时，才被调用</span></span><br><span class="line">- <span class="keyword">const</span> [color, setColor] = <span class="title function_">useState</span>(<span class="string">&#x27;salmon&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(counter + 1)&#125;&gt;toggle loading<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-React函数组件或自定义钩子中只在调用Hook"><a href="#3-React函数组件或自定义钩子中只在调用Hook" class="headerlink" title="3. React函数组件或自定义钩子中只在调用Hook"></a>3. React函数组件或自定义钩子中只在调用Hook</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在普通函数中不要使用hook</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">AppContent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    …………</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="attr">dataIndex</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">- <span class="attr">render</span>: <span class="title class_">AppContent</span>,</span><br><span class="line">+ <span class="attr">render</span>: <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AppContent</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>只从React函数组件或自定义钩子中调用Hook</li><li>只在最顶层使用 Hook</li><li>不要在循环，条件或嵌套函数中调用 Hook</li><li>确保总是在你的 React 函数的最顶层以及任何 return 之前使用 Hook</li></ul><p>这有助于React在多个<code>useState</code>和<code>useEffect</code>调用之间保留钩子的状态。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
